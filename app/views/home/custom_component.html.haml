= title 'Custom Component', display_ui: false
%h2 Rules
%ul
  %li The component must inherit the <code>component</code> element.
  %li The component must meet the convention of the component.

%h2 Simple custom component
%p Content can be pass by variable (<code>content</code>) or by block (<code>block</code>).
Useful variables in render method:
%ul
  %li <code>content</code> (content of component by variable or by block)
  %li <code>options</code> (options of component)
  %li <code>html_options</code> (html options of component)
= example do |e|
  - e.code do
    :plain
      Component.new(content = nil, options = {}, html_options = {}, &block).render

= warning_message "Component render: ", "The component must use the <code>render</code> method to generate html code."

%h3 Structure

= example do |e|
  Useful methods to add default options and html options for a component:
  %ul
    %li <code>component_html_classes</code>
    %li <code>component_options</code>
    %li <code>component_html_options</code>
  - e.code do
    :plain
      module UiBibz::Ui::Ux
        class MyComponent < UiBibz::Ui::Core::Component

          # initialize component
          def initialize content = nil, options = nil, html_options = nil, &block
            super
          end

          # Render html
          def render
          end

          private

          # Default component classes [String, Array]
          def component_html_classes
          end

          # Default component options [Hash]
          def component_options
          end

          # Default component html options [Hash]
          def component_html_options
          end

        end
      end

%h3 Html classes structure
= example do |e|
  Several methods are called during the creation of html options classes:
  %ul
    %li <code>state</code>
    %li <code>status</code>
    %li <code>effect</code>
    %li <code>connect</code>
    %li <code>component_html_classes</code>
  - e.code do
    :plain
      module UiBibz::Ui::Ux
        class MyComponent < UiBibz::Ui::Core::Component

          # initialize component
          def initialize content = nil, options = nil, html_options = nil, &block
            super
          end

          # Render html
          def render
          end

          private

          # To define state html class [:active, :disabled]
          def state
          end

          # To define status html class [#{ UiBibzApp::Application::STATUSES.join(', ') }]
          def status
          end

          # To define effect html class
          def effect
          end

          # To define connect html class
          def connect
          end

          # To add classes to html classes
          def component_html_classes
          end

        end
      end


%h3 Example 1

%p Create a <code>ui</code> folder in your application in <code>app</code> and put your components inside.

%h4 Creation of component
= example do |e|
  - e.code do
    :plain
      # app/ui/my_component.rb
      module UiBibz::Ui::Ux
        class MyComponent < UiBibz::Ui::Core::Component

          def initialize content = nil, options = nil, html_options = nil, &block
            super
          end

          def render
            content_tag :div, html_options do
              link_to content, options[:url]
            end
          end

        end
      end

%br
%h4 Call custom Component
= example do |e|
  - e.header do
    <div class='my-link'><a href='/'>My link</a></div>
  - e.code do
    :plain
      UiBibz::Ui::Ux::MyComponent.new('My link', { url: '/' }, { class: 'my-link'}).render
      # or
      UiBibz::Ui::Ux::MyComponent.new({ url: '/' }, { class: 'my-link'}) do
        "My link"
      end.render
  - e.html do
    <div class='my-link'><a href='/'>My link</a></div>


%h3 Example  2
%h4 Creation of component

= example do |e|
  - e.code do
    :plain
      # app/ui/my_component.rb
      module UiBibz::Ui::Ux
        class MyComponent2 < UiBibz::Ui::Core::Component

          def initialize content = nil, options = nil, html_options = nil, &block
            super
          end

          def render
            content_tag :div, html_options do
              link_to content, options[:url]
            end
          end

          private

          # Add default classes
          def component_html_classes
            ['my-class', status]
          end

          # Disabled component by default
          def component_options
            { state: :disabled } unless options[:state].nil
          end

          # Add html options data
          def component_html_data
            add_html_data('target', options[:target]) unless options[:target].nil?
          end

          # Add status class if status option is not nil
          def plugged
            "my-component-\#{ options[:plugged] }" unless options[:plugged].nil?
          end

          # Method is called during the component html class creation
          def status
            "my-component-\#{ options[:status] || :secondary }"
          end

        end
      end

%br
%h4 Create a helper
= example do |e|
  - e.code do
    :plain
      # app/helpers/component_helper.rb
      def my_custom_component_2_helper content = nil, options = nil, html_options = nil, &block
        UiBibz::Ui::Ux::MyComponent2.new(content, options, html_options, block).render
      end

%h4 Call custom helper
= example do |e|
  - e.header do
    <div class='my-class my-component-plugged my-link' data-target='#target'><a href='/'>My link</a></div>
  - e.code do
    :plain
      my_custom_component_2_helper('My link', { url: '/', plugged: true, target: '#target' }, { class: 'my-link'})
      # or
      my_custom_component_2_helper({ url: '/', plugged: true, target: '#target' }, { class: 'my-link'}) do
        'My link'
      end
  - e.html do
    <div class='my-class my-component-plugged my-component-secondary my-link' data-target='#target'><a href='/'>My link</a></div>

%h2 Complex custom component

= example do |e|
  Use tap method to add items to a component.
  - e.code do
    :plain
      module UiBibz::Ui::Ux
        class MyComplexComponent < UiBibz::Ui::Core::Component

          # initialize component
          def initialize content = {}, options = {}, html_options = {}, &block
            super
            @items = []
          end

          # Render html
          def render
            content_tag :div, @items.map(&:render).join.html_safe, html_options
          end

          # add links
          def link content = nil, options = nil, html_options = nil, &block
            @items << UiBibz::Ui::Core::Navigations::Link.new(content, options, html_options, &block)
          end

          private

          def component_html_classes
            "my-complex-component"
          end

        end
      end

%h4 Create a helper
= example do |e|
  - e.code do
    :plain
      # app/helpers/component_helper.rb
      def my_complex_component content = nil, options = nil, html_options = nil, &block
        UiBibz::Ui::Ux::MyComplexComponent.new(content, options, html_options).tap(&block).render
      end

%h4 Call custom helper
= example do |e|
  - e.header do
    = my_complex_component class: 'my-class' do |cc|
      - cc.link 'Link1', url: '#link1', class: 'mr-2'
      - cc.link url: '#link2' do
        Link 2
  - e.code do
    :plain
      my_complex_component class: 'my-class' do |cc|
        cc.link "Link1", url: "#link1", class: "mr-2"
        cc.link url: "#link2" do
          Link 2
        end
      end
  - e.html do
    :plain
      <div class='my-class my-complex-component'>
        <a href='#link1' class="mr-2">Link 1</a>
        <a href='#link2'>Link 2</a>
      </div>

%h2 Tree architecture in your app
= example do |e|
  - e.code do
    :plain
      app
      |_ ui
        |_ component_name.rb

      # or

      app
      |_ui
        |_ component_name_folders
          |_ component_name.rb
          |_ components
            |_ sub_component_1.rb
            |_ sub_component_2.rb

<em>Folder names must be named in plural.</em>

