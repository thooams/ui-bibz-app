%h1 Custom Component
%h2 Rules
%ul
  %li The component must inherit the <code>component</code> element.
  %li The component must meet the convention of the component:

%h2 Simple component
%p Content can be pass by variable (<code>content</code>) or by block (<code>block</code>).
= example do |e|
  - e.code do
    :plain
      Component.new(content = nil, options = {}, html_options = {}, &block).render

%h3 Explications

Useful variables in render method:
%ul
  %li <code>content</code> (content of component by variable or by block)
  %li <code>options</code> (options of component)
  %li <code>html_options</code> (html options of component)

= warning_message "Component render: ", "The component must use the <code>render</code> method to generate html code."

%h3 Structure

= example do |e|
  - e.code do
    :plain
      class MyComponent < UiBibz::Ui::Core::Component

        # initialize component
        def initialize content = {}, options = {}, html_options = {}, &block
          super
        end

        # Render html
        def render
        end

        private

        # Default component classes [String, Array]
        def component_html_classes
        end

        # Default component options [Hash]
        def component_options
        end

        # Default component html options [Hash]
        def component_html_options
        end

      end

%h3 Explications

Useful methods to add default options and html options for a component:
%ul
  %li <code>component_html_classes</code>
  %li <code>component_options</code>
  %li <code>component_html_options</code>

%h3 Html classes structure
= example do |e|
  - e.code do
    :plain
      class MyComponent < UiBibz::Ui::Core::Component

        # initialize component
        def initialize content = {}, options = {}, html_options = {}, &block
          super
        end

        # Render html
        def render
        end

        private

        # To define state html class [:active, :disabled]
        def state
        end

        # To define status html class [#{ UiBibzApp::Application::STATUSES.join(', ') }]
        def status
        end

        # To define effect html class
        def effect
        end

        # To define connect html class
        def connect
        end

        # To add classes to html classes
        def component_html_classes
        end

      end

%h3 Explications

Several methods are called during the creation of html options classes:
%ul
  %li <code>state</code>
  %li <code>status</code>
  %li <code>effect</code>
  %li <code>connect</code>
  %li <code>component_html_classes</code>

%h3 Example 1

%p Create a <code>ui</code> folder in your application in <code>app</code> and put your components inside.

%h4 Creation of component
= example do |e|
  - e.code do
    :plain
      # app/ui/my_component.rb
      module UiBibz::Ui::Ux
        class MyComponent < UiBibz::Ui::Core::Component

          def initialize content = {}, options = {}, html_options = {}, &block
            super
          end

          def render
            content_tag :div, html_options do
              link_to content, options[:url]
            end
          end

        end
      end

%br
%h4 Call custom Component
= example do |e|
  - e.header do
    <div class='my-link'><a href='/'>My link</a></div>
  - e.code do
    :plain
      UiBibz::Ui::Ux::MyComponent.new('My link', { url: '/' }, { class: 'my-link'}).render
      # or
      UiBibz::Ui::Ux::MyComponent.new({ url: '/' }, { class: 'my-link'}) do
        "My link"
      end.render
  - e.html do
    <div class='my-link'><a href='/'>My link</a></div>


%h3 Example  2
%h4 Creation of component

= example do |e|
  - e.code do
    :plain
      # app/ui/my_component.rb
      module UiBibz::Ui::Ux
        class MyComponent < UiBibz::Ui::Core::Component

          def initialize content = {}, options = {}, html_options = {}, &block
            super
          end

          def render
            content_tag :div, html_options do
              link_to content, options[:url]
            end
          end

          private

          # Add default classes
          def component_html_classes
            super << ['my-class', status]
          end

          # Disabled component by default
          def component_options
            options[:state].nil ? super.merge({ state: :disabled }) : super
          end

          # Add html options data
          def component_html_data
            super
            add_html_data('target', options[:target]) unless options[:target].nil?
          end

          # Add status class if status option is not nil
          def plugged
            "my-component-\#{ options[:plugged] }" unless options[:plugged].nil?
          end

          # Method is called during the component html class creation
          def status
            "my-component-\#{ options[:status] || :secondary }"
          end

        end
      end

%br
%h4 Call custom Component
= example do |e|
  - e.header do
    <div class='my-class my-component-plugged my-link' data-target='#target'><a href='/'>My link</a></div>
  - e.code do
    :plain
      UiBibz::Ui::Ux::MyComponent.new('My link', { url: '/', plugged: true, target: '#target' }, { class: 'my-link'}).render
      # or
      UiBibz::Ui::Ux::MyComponent.new({ url: '/', plugged: true, target: '#target' }, { class: 'my-link'}) do
        'My link'
      end.render
  - e.html do
    <div class='my-class my-component-plugged my-component-secondary my-link' data-target='#target'><a href='/'>My link</a></div>


%h3 Tree architecture in Ui Bibz Library
= example do |e|
  - e.code do
    :plain
      lib
      |_ ui_bibz
        |_ ui
          |_ core
            |_ component_name.rb
          |_ ux
            |_ component_name.rb

      # or

      lib
      |_ ui_bibz
        |_ ui
          |_core
            |_ component_name_folders
              |_ component_name.rb
              |_ components
                |_ sub_component_1.rb
                |_ sub_component_2.rb
          |_ux
            |_ component_name_folders
              |_ component_name.rb
              |_ components
                |_ sub_component_1.rb
                |_ sub_component_2.rb

<em>Folder names must be named in plural.</em>

%h3 Tree architecture in your app
= example do |e|
  - e.code do
    :plain
      app
      |_ ui
        |_ component_name.rb

      # or

      app
      |_ui
        |_ component_name_folders
          |_ component_name.rb
          |_ components
            |_ sub_component_1.rb
            |_ sub_component_2.rb

<em>Folder names must be named in plural.</em>

