= title 'Component', false
%blockquote UiBibz::Ui::Core::Component
.bd-callout
  %p
    The component is the core of Ui Bibz.
    %br
    Each element of the framework inherits from
    %code component
    element.
    %br
    It may contain three arguments :

  %ul
    %li content (variable or block)
    %li= "options (hash <default: {}>)"
    %li= "html_options (hash <default: {}>)"

- @sections = sections do |s|
  - s.section title: "Component" do
    = example do |c|
      - c.code do
        Component.new content, options, html_options
        \# or
        Component.new(options, html_options) do
          content
        end

  - s.section title: "Render method" do
    :markdown
      The `render` method generates the html code of the component.
    = example do |c|
      - c.code do
        Component.new('My content', { status: :primary }, { class: 'my-class' }).render
        \# or
        Component.new({ size: :xs }, { id: 'my-id' }) do
          My content
        end.render

  - s.section title: "Size" do
    = size_description
    = example do |c|
      - c.code do
        - UiBibzApp::Application::SIZES.each do |size|
          = "Component.new content, size: :#{ size }"

  - s.section title: "Status" do
    :markdown
      Some component may have the `status` option in their settings.
      This option lets you change the color of the item as specified in [the bootstrap documentation](https://getbootstrap.com/docs/4.0/components/buttons/).

    = status_description
    = example do |c|
      - c.code do
        - UiBibzApp::Application::STATUSES.each do |status|
          = "Component.new content, status: :#{ status }"

  - s.section title: "Glyph" do
    :markdown
      Some component may have the `glyph` option in their settings.
      This option lets you add a glyph to its component.
      You can write the value of this argument in many ways, for this, please refer to the component [glyph](../components/glyph).

    = example do |c|
      - c.code do
        Component.new content, glyph: 'star'
        Component.new content, glyph: { name: 'star', size: 2, type: 'fw', label: 'Diamond' }

  - s.section title: "State" do
    = example do |c|
      - c.code do
        Component.new content, state: :active
        Component.new content, state: :disabled

  - s.section title: "Html options" do
    :markdown

      You can add any html properties.
    = example do |c|
      - c.code do
        Component.new content, {}, { class: 'my-component', data: { target: 'first' }}
        Component.new({}, { id: 'my-id' }) do
          content
        end

  - s.section title: "Tips" do
    :markdown
      Key `class:` can be insert in `html_options` and in `options` too.<br/>
      This solution was added to simplify writing of the component.
    = example do |c|
      - c.code do
        Component.new content, { size: :xs }, { class: 'my-component' }
        \# or
        Component.new content, class: 'my-component', size: :xs

  - s.section title: "Custom Component" do
    %p You can create your own components into your application.
    %p For more information, see #{ link_to 'Custom Component page', custom_component_path}

= @sections.render
