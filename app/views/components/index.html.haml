:markdown
  # Components

- @sections = sections do |s|
  - s.section title: "Component" do
    :markdown
      The component is the core of Ui Bibz.<br/>
      Each element of the framework inherits from `component` element.<br/>
      It may contain three arguments :

      * content (variable or block)
      * options
      * html_options

    = example do |c|
      - c.code do
        Component.new content, options = {}, html_options = {}
        \# or
        Component.new(options = {}, html_options = {}) do
          content
        end
      - c.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Render method" do
    :markdown
      The `render` method generates the html code of the component.
    = example do |c|
      - c.code do
        Component.new('My content', { status: :primary }, { class: 'my-class' }).render
        \# or
        Component.new({ size: :xs }, { id: 'my-id' }) do
          My content
        end.render
      - c.footer do
        = documentation_link 'Documentation', '#'

  :markdown
    ##Component Options

  - s.section title: "Size" do
    :markdown
      Some component may have the size option in their settings.
      The size argument contains three distinct values :

        * :xs
        * :sm
        * :md
        * :lg

    = example do |c|
      - c.code do
        Component.new content, size: :xs
        Component.new content, size: :md
        Component.new content, size: :lg
      - c.footer do
        = documentation_link 'Documentation', '#'
        |
        = itag "buttons", components_buttons_path
        ,
        = itag "dropdowns", components_dropdowns_path
        ,
        = itag "glyphs", components_glyphs_path
        ,
        = itag "navs", components_navs_path
        ,
        = itag "stars", components_stars_path

  - s.section title: "Status" do
    :markdown
      Some component may have the `status` option in their settings.
      This option lets you change the color of the item as specified in [the bootstrap documentation](http://v4-alpha.getbootstrap.com/components/buttons/).
      The `status` argument contains 7 distinct values :

        * :primary
        * :secondary
        * :danger
        * :success
        * :info
        * :warning

    = example do |c|
      - c.code do
        Component.new content, status: :primary
        Component.new content, status: :secondary
        Component.new content, status: :danger
        Component.new content, status: :success
        Component.new content, status: :info
        Component.new content, status: :warning
      - c.footer do
        = documentation_link 'Documentation', '#'
        |
        = itag "buttons", components_buttons_path
        ,
        = itag "dropdowns", components_dropdowns_path
        ,
        = itag "glyphs", components_glyphs_path
        ,
        = itag "navs", components_navs_path
        ,
        = itag "stars", components_stars_path

  - s.section title: "Glyph" do
    :markdown
      Some component may have the `glyph` option in their settings.
      This option lets you add a glyph to its component.
      You can write the value of this argument in many ways, for this, please refer to the component [glyph](../components/glyphs).

    = example do |c|
      - c.code do
        Component.new content, glyph: 'star'
        Component.new content, glyph: { name: 'star', size: 2, type: 'fw' }
      - c.footer do
        = documentation_link 'Documentation', '#'
        |
        = itag "buttons", components_buttons_path
        ,
        = itag "dropdowns", components_dropdowns_path
        ,
        = itag "glyphs", components_glyphs_path
        ,
        = itag "navs", components_navs_path
        ,
        = itag "stars", components_stars_path
        ,
        = itag "cards", components_cards_cards_path

  - s.section title: "State" do
    = example do |c|
      - c.code do
        Component.new content, state: :active
        Component.new content, state: :disable
      - c.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Html options" do
    :markdown

      You can add any html properties.
    = example do |c|
      - c.code do
        Component.new content, {}, { class: 'my-component', data: { target: 'first' }}
        Component.new({}, { id: 'my-id' }) do
          content
        end
      - c.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Tricks" do
    :markdown
      Key `class:` can be insert in `html_options` and in `options` too.<br/>
      This solution was added to simplify writing of the component.
    = example do |c|
      - c.code do
        Component.new content, { size: :xs }, { class: 'my-component' }
        \# or
        Component.new content, class: 'my-component', size: :xs
      - c.footer do
        = documentation_link 'Documentation', '#'
= @sections.render
