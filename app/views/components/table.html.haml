= title 'Table'
%blockquote UiBibz::Ui::Ux::Tables::Table
.bd-callout
  %p
    The
    %code table
    component is a html table with a store.
    %br
    An pagination and/or a search can be added before or after the component with these methods:

    %ul
      %li table_pagination_pagination
      %li table_pagination_per_page
      %li table_search_field

    %p
      The pagination is managed through the gem #{ link_to 'will_paginate', 'https://github.com/mislav/will_paginate', target: '_blank' }.
      %br
      The methods of
      %code will_paginate
      work with the
      %code table
      component such as
      %code per_page
      \.


= card tap: true do |c|
  - c.header 'Important'
  - c.block do
    To add, update, remove columns or actions in the component <code>table</code> you must add the option <code>tap: true</code>.

- @sections = sections do |s|
  - s.section title: "Model" do

    %p Insert in the model the following line :
    = example do |c|
      - c.code do
        class User < ActiveRecord::Base
          include UiBibz::Concerns::Models::Searchable
          ...
        end

  - s.section title: "Controller" do
    :markdown
      Use the method in your model `table_search_pagination` passing arguments :

      * params
      * session
      * opts (optional)
    = example do |c|
      - c.code do
        class UserController < ApplicationController
          def index
            @users = User.table_search_pagination(params, session, opts)
            ...
          end
          ...
        end

  - s.section title: "View" do
    :markdown
      The columns are all displayed by default and the default actions are:

      * show
      * edit
      * delete

    = example do |c|
      - c.header do
        = table({ store: @users, tap: true }) do |b|
          - b.columns do |cls|
            - cls.column :id
            - cls.column :email
            - cls.column :active
            - cls.column :company
            - cls.column :created_at
            - cls.column :updated_at
          - b.actions do |acs|
            - acs.link 'Show', url: '#show', glyph: 'eye'
            - acs.link 'Edit', url: '#show', glyph: 'pencil'
            - acs.link 'Delete', url: '#show', glyph: 'trash',  link_html_options: { data: { confirm: 'Are you sure?' }}
      - c.code do
        table store: @users
      - c.html do
        <table class="table">
          <thead>
            <tr>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=id&amp;direction=asc&amp;sort=users.id">Id</a>
              </th>
                <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=email&amp;direction=asc&amp;sort=users.email">Email</a>
              </th>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=active&amp;direction=asc&amp;sort=users.active">Active</a>
             </th>
             <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=company&amp;direction=asc&amp;sort=users.company">Company</a>
             </th>
             <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=created_at&amp;direction=asc&amp;sort=users.created_at">Created At</a>
             </th>
             <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=updated_at&amp;direction=asc&amp;sort=users.updated_at">Updated At</a>
             </th>
             <th class="action">
             </th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td>test0@test.com</td>
              <td>true</td>
              <td>Company test 6646</td>
              <td>2015-09-04 08:24:05 UTC</td>
              <td>2015-09-04 08:24:05 UTC</td>
              <td>
                <div class="dropdown-action btn-group dropdown" role="group">
                  <button class="btn btn-primary btn-xs dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="glyph fa fa-ellipsis-v fa-fw"></i> Actions <span class="caret"></span></button>
                  <div class="dropdown-menu dropdown-menu-right">
                    <a class="dropdown-item" href="#show"><i class="glyph fa fa-eye"></i> Show</a>
                    <a class="dropdown-item" href="#show"><i class="glyph fa fa-pencil"></i> Edit</a>
                    <a class="dropdown-item" data-confirm="Are you sure?" href="#show"><i class="glyph fa fa-trash"></i> Delete</a>
                  </div>
                </div>
              </td>
            </tr>
            <tr>
              <td>2</td>
              <td>test1@test.com</td>
              <td>true</td>
              <td>Company test 266</td>
              <td>2015-09-04 08:24:05 UTC</td>
              <td>2015-09-04 08:24:05 UTC</td>
              <td>
                <div class="dropdown-action btn-group dropdown" role="group">
                  <button class="btn btn-primary btn-xs dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <i class="glyph fa fa-ellipsis-v fa-fw"></i> Actions <span class="caret"></span>
                  </button>
                  <div class="dropdown-menu dropdown-menu-right">
                    <a class="dropdown-item" href="#show"><i class="glyph fa fa-eye"></i> Show</a>
                    <a class="dropdown-item" href="#show"><i class="glyph fa fa-pencil"></i> Edit</a>
                    <a class="dropdown-item" data-confirm="Are you sure?" href="#show"><i class="glyph fa fa-trash"></i> Delete</a>
                  </div>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      - c.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Table Options" do
    :markdown
      Table has several options:

      * store
      * form
      * type (`Symbol`)
      * status
      * striped (`Boolean`)
      * bordered (`Boolean`)
      * hoverable (`Boolean`)
      * responsive (`Boolean`)
      * reflow (`Boolean`)
      * #{ size_link }
      * #{ status_link }
      * thead
        * status (`Symbol`)

  - s.section title: "Table Blocks" do
    :markdown
      Table has several blocks:

      * columns
      * actions

  - s.section title: "Table Columns" do
    :markdown
      Adding columns through the column method contains several arguments and this method is based on the component :

      * data_index (`Symbol`)
      * html_options (`Hash`)
      * options (`Hash`)
        * name (`String`) [the name of the column]
        * count (`Boolean`) [uses the count method on the element]
        * date_format (`String`) [formats the date display using the strftime method ex: `%Y/%M/%D`]
        * format (`Lambda`) [formats the elements of colone using lambda **records** and **record** will be arguments]
        * link (`String`) [add a link where the expression `:id` is parsed and replaced with the corresponding integer]
        * sort (`String`) [to sort on fields]
        * column_id (`Symbol`) [identify the column can be useful for the spell]
        * custom_sort (`String`) [indicates the table will be sorted in a customized way]
        * as (`:boolean, :progress, :input`)
        * hidden (`Boolean`) [hide column]

    = example do |c|
      - c.header do
        = table({ store: @users, tap: true }) do |b|
          - b.columns do |cls|
            - cls.column :id, name: '#'
            - cls.column :email, link: '#email'
            - cls.column :active, as: :boolean
            - cls.column :company, format: lambda { |records, record| "company #{ record.id }" }
            - cls.column :created_at, date_format: '%d/%M/%Y'
            - cls.column :updated_at
          - b.actions do |acs|
            - acs.link 'Show', url: '#show', glyph: 'eye'
            - acs.link 'Edit', url: '#show', glyph: 'pencil'
            - acs.link 'Delete', url: '#show', glyph: 'trash',  link_html_options: { data: { confirm: 'Are you sure?' }}
      - c.code do
        table({ store: @users, tap: true }) do |b|
          b.columns do |cls|
            cls.column :id, name: '#'
            cls.column :email, link: '#email'
            cls.column :active, as: :boolean
            cls.column :company, format: lambda { |records, record| "company \#{ record.id }" }
            cls.column :created_at, date_format: '%d/%M/%Y'
            cls.column :updated_at
          end
        end
      - c.html do
        <table class="table">
          <thead>
            <tr>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=id&amp;direction=asc&amp;sort=users.id">#</a>
              </th>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=email&amp;direction=asc&amp;sort=users.email">Email</a>
              </th>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=active&amp;direction=asc&amp;sort=users.active">Active</a>
              </th>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=company&amp;direction=asc&amp;sort=users.company">Company</a>
              </th>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=created_at&amp;direction=asc&amp;sort=users.created_at">Created At</a>
              </th>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=updated_at&amp;direction=asc&amp;sort=users.updated_at">Updated At</a>
              </th>
              <th class="action"></th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td><a href="#email">test0@test.com</a></td>
              <td><i class="glyph-success glyph fa fa-check-circle"></i></td>
              <td>Company test 6646</td>
              <td>04/24/2015</td>
              <td>2015-09-04 08:24:05 UTC</td>
              <td>
              <div class="dropdown-action btn-group dropdown" role="group">
                <button class="btn btn-primary btn-xs dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                  <i class="glyph fa fa-ellipsis-v fa-fw"></i> Actions <span class="caret"></span>
                </button>
                <div class="dropdown-menu dropdown-menu-right">
                  <a class="dropdown-item" href="#show"><i class="glyph fa fa-eye"></i> Show</a>
                  <a class="dropdown-item" href="#show"><i class="glyph fa fa-pencil"></i> Edit</a>
                  <a class="dropdown-item" data-confirm="Are you sure?" href="#show"><i class="glyph fa fa-trash"></i> Delete</a>
                </div>
              </div>
              </td>
            </tr>
          </tbody>
        </table>
      - c.footer do
        = documentation_link 'Documentation', '#'


  - s.section title: "Table Actions" do
    :markdown
      The shares are included in a dropdown button.
      These shares inherit the `DropdownLink` component and provides the following methods :

      * [Header](../components/dropdowns#header)
      * [Divider](../components/dropdowns#divider)
      * [Link](../components/dropdowns#link)
      * [Html](../components/dropdowns#html)

      If no action is added, actions by defaults are displayed.
      You can activate them through the `default_actions: false`.<br/>
      The `link` option can inject the id of the record by writing in your `url: user_path(:id)`.

    = example do |c|
      - c.header do
        = table({ store: @users, tap: true }) do |b|
          - b.columns do |cls|
            - cls.column :id
            - cls.column :email
            - cls.column :active
            - cls.column :company
            - cls.column :created_at
            - cls.column :updated_at
          - b.actions do |acs|
            - acs.link 'Open', url: "#open", glyph: 'folder-open'
            - acs.link 'Close', url: "#close", glyph: 'folder'
            - acs.link 'Delete', url: "#delete", glyph: 'trash',  link_html_options: { data: { confirm: 'Are you sure?' }}
      - c.code do
        table({ store: @users, tap: true }) do |b|
          b.actions do |acs|
            acs.link 'Open', url: open_user_path(:id), glyph: 'folder-open'
            acs.link 'Close', url: close_user_path(:id), glyph: 'folder'
            acs.link 'Delete', url: user_path(:id), glyph: 'trash',  link_html_options: { data: { confirm: 'Are you sure?' }}
          end
        end
      - c.html do
        <table class="table">
          <thead>
            <tr>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=id&amp;direction=asc&amp;sort=users.id">#</a>
              </th>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=email&amp;direction=asc&amp;sort=users.email">Email</a>
              </th>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=active&amp;direction=asc&amp;sort=users.active">Active</a>
              </th>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=company&amp;direction=asc&amp;sort=users.company">Company</a>
              </th>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=created_at&amp;direction=asc&amp;sort=users.created_at">Created At</a>
              </th>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=updated_at&amp;direction=asc&amp;sort=users.updated_at">Updated At</a>
              </th>
              <th class="action"></th>
            </tr>
          </thead>
          <tbody>
            <tr>
            <td>1</td>
            <td><a href="#email">test0@test.com</a></td>
            <td><i class="glyph-success glyph fa fa-check-circle"></i></td>
            <td>Company test 6646</td>
            <td>04/24/2015</td>
            <td>2015-09-04 08:24:05 UTC</td>
            <td>
              <div class="dropdown-action btn-group dropdown" role="group">
                <button class="btn btn-primary btn-xs dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                  <i class="glyph fa fa-ellipsis-v fa-fw"></i> Actions <span class="caret"></span>
                </button>
                <div class="dropdown-menu dropdown-menu-right">
                  <a class="dropdown-item" href="#open"><i class="glyph fa fa-folder-open"></i> Open</a>
                  <a class="dropdown-item" href="#close"><i class="glyph fa fa-folder"></i> Close</a>
                  <a class="dropdown-item" data-confirm="Are you sure?" href="#delete"><i class="glyph fa fa-trash"></i> Delete</a>
                </div>
              </div>
            </td>
            </tr>
          </tbody>
        </table>
      - c.footer do
        = documentation_link 'Documentation', '#'

    :markdown
      Actions can be formatted according to each line.<br/>
      With the `format` method you have access to the record to format the desired action.

    = example do |c|
      - c.header do
        = table({ store: @users, tap: true }) do |b|
          - b.columns do |cls|
            - cls.column :id
            - cls.column :email
            - cls.column :active
            - cls.column :company
            - cls.column :created_at
            - cls.column :updated_at
          - b.actions do |acs|
            - acs.format do |record|
              - acs.link 'Show', url: '#show', glyph: 'eye'
              - acs.link 'Edit', url: '#show', glyph: 'pencil'
              - acs.link 'Delete', url: '#show', glyph: 'trash',  link_html_options: { data: { confirm: 'Are you sure?' }}
              - if record.active
                - acs.link 'Active', url: '#active', glyph: 'check-circle'
              - else
                - acs.link 'Disabled', url: '#disabled'
      - c.code do
        table({ store: @users, tap: true }) do |b|
          b.actions do |acs|
            acs.format do |record|
              acs.link 'Show', url: user_path(:id), glyph: 'eye'
              acs.link 'Edit', url: edit_user_path(:id), glyph: 'pencil'
              acs.link 'Delete', url: user_path(:id), glyph: 'trash',  link_html_options: { data: { confirm: 'Are you sure?' }}
              if record.active?
                acs.link 'Active', { url: active_users_path(record.id) }
              else
                acs.link 'Disabled', { url: disabled_users_path(record.id) }
              end
            end
          end
        end
      - c.html do
        <table class="table">
          <thead>
            <tr>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=id&amp;direction=asc&amp;sort=users.id">#</a>
              </th>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=email&amp;direction=asc&amp;sort=users.email">Email</a>
              </th>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=active&amp;direction=asc&amp;sort=users.active">Active</a>
              </th>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=company&amp;direction=asc&amp;sort=users.company">Company</a>
              </th>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=created_at&amp;direction=asc&amp;sort=users.created_at">Created At</a>
              </th>
              <th>
                <a class="dropup" href="/components/tables?action=tables&amp;column_id=updated_at&amp;direction=asc&amp;sort=users.updated_at">Updated At</a>
              </th>
              <th class="action"></th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td><a href="#email">test0@test.com</a></td>
              <td><i class="glyph-success glyph fa fa-check-circle"></i></td>
              <td>Company test 6646</td>
              <td>04/24/2015</td>
              <td>2015-09-04 08:24:05 UTC</td>
              <td>
                <div class="dropdown-action btn-group dropdown" role="group">
                  <button class="btn btn-primary btn-xs dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <i class="glyph fa fa-ellipsis-v fa-fw"></i> Actions <span class="caret"></span>
                  </button>
                  <div class="dropdown-menu dropdown-menu-right">
                    <a class="dropdown-item" href="#show"><i class="glyph fa fa-eye"></i> Show</a>
                    <a class="dropdown-item" href="#show"><i class="glyph fa fa-pencil"></i> Edit</a>
                    <a class="dropdown-item" data-confirm="Are you sure?" href="#show"><i class="glyph fa fa-trash"></i> Delete</a>
                    <a class="dropdown-item" href="#active"><i class="glyph fa fa-check-circle"></i> Active</a>
                  </div>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      - c.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Table Search component" do
    %p This component is linked with table component.
    = example do |c|
      - c.header do
        %br
        = table_search_field store: @users
      - c.code do
        table_search_field store: @users
      - c.html do
        <form class="form-table-search-field" action="/components/tables" accept-charset="UTF-8" method="get">
          <input name="utf8" type="hidden" value="✓">
          <div class="input-group input-group-sm table-search-field">
            <span class="input-group-addon"><i class="glyph fa fa-search"></i></span>
            <input type="hidden" name="only_path" value="true">
            <input type="search" name="search" class="form-control" placeholder="Search by Name...">
            <span class="input-group-btn">
              <button type="button" class="btn btn-secondary"><i class="glyph fa fa-times-circle"></i></button>
            </span>
          </div>
        </form>
      - c.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Table Pagination component" do
    %p This component is linked with table component.
    = example do |c|
      - c.header do
        = table_pagination store: @users
      - c.code do
        table_pagination store: @users
      - c.html do
        <ul class="pagination pagination">
          <li class="prev disabled"><span>← Previous</span></li>
          <li class="active"><span>1</span></li>
          <li><a rel="next" href="/components/tables?page=2">2</a></li>
          <li><a href="/components/tables?page=3">3</a></li>
          <li><a href="/components/tables?page=4">4</a></li>
          <li><a href="/components/tables?page=5">5</a></li>
          <li><a href="/components/tables?page=6">6</a></li>
          <li><a href="/components/tables?page=7">7</a></li>
          <li><a href="/components/tables?page=8">8</a></li>
          <li><a href="/components/tables?page=9">9</a></li> <li class="disabled"><span>…</span></li>
          <li><a href="/components/tables?page=49">49</a></li>
          <li><a href="/components/tables?page=50">50</a></li>
          <li class="next"><a rel="next" href="/components/tables?page=2">Next →</a></li>
        </ul>
      - c.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Table Pagination per page component" do
    %p This component is linked with table component.
    = example do |c|
      - c.header do
        = table_pagination_per_page store: @users
      - c.code do
        table_pagination_per_page store: @users
      - c.html do
        <form action="/components/tables" accept-charset="UTF-8" method="get"><input name="utf8" type="hidden" value="✓">
          <div class="table-pagination-per-page">Displaying User <b>1&nbsp;-&nbsp;3</b> of <b>150</b> in total | Per page:
            <input type="hidden" name="only_path" value="true">
            <select name="per_page" id="per_page" class="form-control">
              <option value="5">5</option>
              <option value="10">10</option>
              <option value="20">20</option>
              <option value="30">30</option>
              <option value="50">50</option>
              <option value="100">100</option>
              <option value="200">200</option>
              <option value="500">500</option>
           </select>
          </div>
        </form>
      - c.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Controller arguments" do
    :markdown
      If we wish, for example, count users who have no direct link with the documents. Imagine, for example, a user with products and that these products contain several documents. We wish to count the number of users by documents.
      We can add arguments in the method `table_search_pagination` that will help to make joints.
    = example do |c|
      - c.code do
        Arguments  = { sortable: {
          column: 'users',
          count:  true,
          joins: "LEFT OUTER JOIN documents_products ON documents_products.document_id = documents.id
                  LEFT OUTER JOIN products ON products.id = documents_products.product_id
                  LEFT OUTER JOIN products_users ON products_users.product_id = products.id
                  LEFT OUTER JOIN users ON users.id = products_users.user_id"
        } }

        @documents = Document.includes(:users).table_search_pagination(params, session, arguments)
    :markdown
      Here the sortable argument means that one wishes to interresser the sorting functionality.
      For that it is necessary :

      * define the name of the column sorted through the argument column (`String`)
      * determine whether the treatment is done on counting with the count argument (`Boolean`)
      * define the join along with the argument (`String , Array , Hash`)

    = example do |c|
      - c.code do
        table store: @documents do |g|
          g.columns do |c|
            c.column :users, { name: 'Users count', count: true, custom_sort: true }
          end
        end

= @sections.render
