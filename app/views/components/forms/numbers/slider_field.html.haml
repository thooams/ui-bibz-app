= title 'Slider Field', url: bootstrap_start_url("components/forms/#range")
%blockquote UiBibz::Ui::Core::Forms::Numbers::SliderField

= code "ui_range_field", component_name: "name"

= component_options do |co|
  - co.state_link
  - co.list 'min', types: %w(integer float), description: "The minimum acceptable value"
  - co.list 'max', types: %w(integer float), description: "The maximum acceptable value"
  - co.list 'thumb_min', types: %w(integer float), description: "Placement of the min thumb"
  - co.list 'thumb_max', types: %w(integer float), description: "Placement of the min thumb"
  - co.list 'step', types: %w(integer float), description: "The acceptable value granularity."
  - co.list "input_name_min", types: :string, description: "Override the name of the first input"
  - co.list "input_name_max", types: :string, description: "Override the name of the last input"

- @sections = sections do |s|
  - s.section title: "Slider Field" do
    %p
      By default, <code>ui_slider_field</code> generate 2 inputs with suffix names: <b>_min</b> and <b>_max</b>:
      %br
      Eq. <code>ui_slider_field "price"</code> will generate two inputs with <b>price_min</b> and <b>price_max</b> name.
      %br
      You can override these inputs with the options: <code>input_name_min</code> and <code>input_name_max</code>.

    = example do |e|
      - e.header do
        = ui_slider_field 'price'
      - e.code do
        ui_slider_field "price"
      - e.html do
        <input type="range" name="range" id="range" class="custom-range">

  - s.section title: "Thumb min and max" do
    = example do |e|
      - e.header do
        = ui_slider_header target: "price", thumb_min: 30, thumb_max: 70
        = ui_slider_field 'price', { thumb_min: 30, thumb_max: 70 }, { id: "price" }
      - e.code do
        ui_slider_header target: "price", thumb_min: 30, thumb_max: 70
        ui_slider_field 'price', thumb_min: 30, thumb_max: 70
      - e.html do
        <input type="range" name="range" id="range" class="custom-range">

  - s.section title: "Options" do
    %p The <code>ui_slider_header</code> options:
    = component_list_options do |co|
      - co.list "target", types: :string, description: "Name of the slider id for the connection"
      - co.list "thumb_min", types: %(float integer), description: "The value of the left thumb"
      - co.list "thumb_max", types: %(float integer), description: "The value of the right thumb"
      - co.list "label_min", types: :string, description: "Text of the the left label"
      - co.list "label_max", types: %(float integer), description: "Text of the right label"
    %p The <code>ui_slider_header</code> can be customed with css like this:
    %pre
      :plain
        .slider-header{
          display: flex;
          justify-content: space-between;
        }
    %br

    = example do |e|
      - e.header do
        = ui_slider_header target: "sensor", thumb_min: -60, thumb_max: 100, class: "slider-header-inline", label_min: "Temp min.", label_max: "Temp max."
        = ui_slider_field 'sensor', { min: -120, thumb_min: -60, thumb_max: 100, max: 120, step: 20 }, { id: "sensor"}
      - e.code do
        ui_slider_header target: "sensor", thumb_min: -60, thumb_max: 100, class: "slider-header-inline", label_min: "Price min.", label_max: "Price max."
        ui_slider_field 'sensor', min: -120, thumb_min: -60, thumb_max: 100, max: 120, step: 20
      - e.html do
        <input type="range" name="range" id="range" class="custom-range">

  - s.section title: "State" do
    = example do |e|
      - e.header do
        = ui_slider_field 'age', state: :disabled, thumb_min: 30, thumb_max: 70
      - e.code do
        ui_slider_field 'age', state: :disabled
      - e.html do
        <input type="range" name="range" id="range" class="custom-range">

  - s.section title: "Simple form" do
    %p= simple_form_text_with_input "ui_slider_field"
    = example do |e|
      - e.header do
        = ui_form_for(@user) do |f|
          - f.input :name, as: :ui_slider_field, label: "Age"
      - e.code do
        ui_form_for(@search) do |f|
          ...
          f.input :name, as: :ui_number_field
          ...
        end

= @sections.render
