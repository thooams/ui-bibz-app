= title 'Auto Complete Field'
%blockquote UiBibz::Ui::Core::Forms::Texts::autoCompleteField
%p.bd-callout
  auto_complete_field is a text_field and use html datalist to auto complete results.
  %br
  = link_to 'Datalist info', 'http://www.w3schools.com/tags/tag_datalist.asp'
  %br
  eq.: Tap "<em>option</em>"

= code "auto_complete_field", component_name: "name"

= component_options do |co|
  - co.state_link
  - co.list 'option_tags', types: 'html'

- @sections = sections do |s|
  - s.section title: "Auto Complete Field" do
    = example do |e|
      - e.header do
        = auto_complete_field 'example1', option_tags: options_for_select(5.times.map{ |i| "option #{i}" })
      - e.code do
        auto_complete_field 'example1', option_tags: options_for_select(5.times.map{ |i| "option \#{i}" })
      - e.html do
        <input type="text" name="example1" id="example1" class="form-control" auto_complete="true" list="example1-datalist">
        <datalist id="example1-datalist">
          <option value="option 0">option 0</option>
          <option value="option 1">option 1</option>
          <option value="option 2">option 2</option>
          <option value="option 3">option 3</option>
          <option value="option 4">option 4</option>
        </datalist>
      - e.footer do
        = documentation_link 'Documentation', '#'

    = example do |e|
      - e.header do
        = auto_complete_field 'example1', status: :success, state: :disabled, option_tags: options_for_select(5.times.map{ |i| "option #{i}" })
      - e.code do
        auto_complete_field 'example1', option_tags: options_for_select(5.times.map{ |i| "option \#{i}" })
      - e.html do
        <input type="text" name="example1" id="example1" class="form-control" auto_complete="true" list="example1-datalist">
        <datalist id="example1-datalist">
          <option value="option 0">option 0</option>
          <option value="option 1">option 1</option>
          <option value="option 2">option 2</option>
          <option value="option 3">option 3</option>
          <option value="option 4">option 4</option>
        </datalist>
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Refresh Connected" do
    %p Option <code>refresh</code> take same arguments than <code>connect</code> option.
    = example do |e|
      - e.header do
        - refresh     = { target: { url: components_forms_selects_select_field_path }}
        = auto_complete_field 'example 3 target', option_tags: select_options_tags, refresh: refresh
      - e.code do
        refresh     = { mode: 'local', target: { url: components_forms_selects_select_field_path }}
        option_tags = options_for_select(5.times.map{ |i| "option \#{i}" })
        auto_complete_field 'example 3', option_tags: option_tags, refresh: refresh
      - e.html do
        :plain
          <>
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Simple form" do
    :markdown
      You can use the <code>auto complete field</code> with gem [simple form](https://github.com/plataformatec/simple_form).

      You must add this line in the file `"config/initializers/simple_form.rb"`

    = example do |e|
      - e.code do
        \...
        config.custom_inputs_namespaces << "CustomInputs"
        \...
    %p
      Then in your view, you can insert your input auto_complete field.
      This simple form component is based on simple_form
      = link_to "collection", "https://github.com/plataformatec/simple_form#collections"
      %br
      Collection inputs accept two other options beside collections:
      %ul
        %li label_method => the label method to be applied to the collection to retrieve the label (use this instead of the text_method option in collection_select)
        %li value_method => the value method to be applied to the collection to retrieve the value
      %i label_method and value_method are optional


    = example do |e|
      - e.header do
        = simple_form_for(@user) do |f|
          - f.input :name, as: :auto_complete_field, collection: 5.times.map{|i| "name #{i}"}
      - e.code do
        simple_form(@user) do |f|
          ...
          f.input :name, as: :auto_complete_field, collection: 5.times.map{|i| "name \#{i}"}
          ...
        end
      - e.footer do
        = documentation_link 'Documentation', '#'

= @sections.render
