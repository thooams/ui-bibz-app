= title 'Auto Complete Field', logo_name: 'ui bibz'
%blockquote UiBibz::Ui::Core::Forms::Texts::autoCompleteField
%p.bd-callout
  ui_auto_complete_field is a text_field which uses html #{ link_to('datalist', 'https://www.w3.org/wiki/HTML/Elements/datalist', target: "_blank") } to auto complete results.

= code "ui_auto_complete_field", component_name: "name"

= component_options do |co|
  - co.state_link
  - co.list 'option_tags', types: 'html'
  - co.list 'value', types: 'string', description: "Input's value"
  - co.append_and_prepend_list
  - co.cache_link
  - co.stimulus_controller_link
  - co.stimulus_action_link
  - co.stimulus_target_link

- @sections = sections do |s|
  - s.section title: "Auto Complete Field" do
    = example do |e|
      - e.header do
        = ui_auto_complete_field 'example1', option_tags: options_for_select(5.times.map{ |i| "option #{i}" })
      - e.code do
        ui_auto_complete_field 'example1', option_tags: options_for_select(5.times.map{ |i| "option \#{i}" })
      - e.html do
        :plain
          <input type="text" name="example1" id="example1" class="form-control" auto_complete="true" list="example1-datalist">
          <datalist id="example1-datalist">
            <option value="option 0">option 0</option>
            <option value="option 1">option 1</option>
            <option value="option 2">option 2</option>
            <option value="option 3">option 3</option>
            <option value="option 4">option 4</option>
          </datalist>

  - s.section title: "Auto Complete Field surrounded" do
    = example do |e|
      - e.header do
        = ui_auto_complete_field 'example1', option_tags: options_for_select(5.times.map{ |i| "option #{i}" }), append: ui_glyph('pencil-alt'), prepend: ui_glyph('camera-retro')
      - e.code do
        ui_auto_complete_field "example1", option_tags: options_for_select(5.times.map{ |i| "option \#{i}" }), append: ui_glyph("pencil-alt"), prepend: ui_glyph("camera-retro")
      - e.html do
        :plain
          <div class="input-group">
            <span class="input-group-addon"><i class="glyph fa fa-pencil-alt"></i></span>
            <input type="text" name="example1" id="example1" class="form-control" autocomplete="true" list="example1-datalist">
            <datalist id="example1-datalist">
              <option value="option 0">option 0</option>
              <option value="option 1">option 1</option>
              <option value="option 2">option 2</option>
              <option value="option 3">option 3</option>
              <option value="option 4">option 4</option>
            </datalist>
            <span class="input-group-addon"><i class="glyph fa fa-camera-retro"></i></span>
          </div>

  - s.section title: "Auto Complete Field options" do
    = example do |e|
      - e.header do
        = ui_auto_complete_field 'example1', status: :success, state: :disabled, option_tags: options_for_select(5.times.map{ |i| "option #{i}" })
      - e.code do
        ui_auto_complete_field "example1", status: :success, state: :disabled option_tags: options_for_select(5.times.map{ |i| "option \#{i}" })
      - e.html do
        :plain
          <input type="text" name="example1" id="example1" class="form-control" auto_complete="true" list="example1-datalist">
          <datalist id="example1-datalist">
            <option value="option 0">option 0</option>
            <option value="option 1">option 1</option>
            <option value="option 2">option 2</option>
            <option value="option 3">option 3</option>
            <option value="option 4">option 4</option>
          </datalist>

  - s.section title: "Refresh Connected" do
    %p Option <code>refresh</code> take same arguments than <code>connect</code> option.
    = example do |e|
      - e.header do
        - refresh     = { target: { url: components_forms_selects_select_field_path }}
        = ui_auto_complete_field 'example 3 target', option_tags: select_options_tags, refresh: refresh
      - e.code do
        refresh     = { mode: 'local', target: { url: components_forms_selects_select_field_path }}
        option_tags = options_for_select(5.times.map{ |i| "option \#{i}" })
        ui_auto_complete_field 'example 3', option_tags: option_tags, refresh: refresh
      - e.html do
        :plain
          <div class="field-refresh input-group">
            <input type="text" name="example 3 target" id="example_3_target" class="form-control auto-complete-field" autocomplete="true" list="example_3_target-datalist">
            <datalist id="example_3_target-datalist">
              <option value="0">option 0</option>
              <option value="1">option 1</option>
              <option value="2">option 2</option>
              <option value="3">option 3</option>
              <option value="4">option 4</option>
            </datalist>
            <div class="input-group-btn">
              <span data-connect="{&quot;events&quot;:&quot;click&quot;,&quot;mode&quot;:&quot;remote&quot;,&quot;target&quot;:{&quot;selector&quot;:&quot;#example_3_target-datalist&quot;,&quot;url&quot;:&quot;/components/forms/selects/select-field&quot;,&quot;data&quot;:[]}}" class="btn-primary ui-bibz-connect btn input-refresh-button">
                <i class="glyph fa fa-refresh">
                </i> </span>
            </div>
          </div>

  - s.section title: "Simple form" do
    %p= simple_form_text_with_input "ui_auto_complete_field"
    %p
      Then in your view, you can insert your input auto_complete field.
      This simple form component is based on simple_form
      = link_to "collection", "https://github.com/plataformatec/simple_form#collections"
      %br
      Collection inputs accept two other options beside collections:
      %ul
        %li label_method => the label method to be applied to the collection to retrieve the label (use this instead of the text_method option in collection_select)
        %li value_method => the value method to be applied to the collection to retrieve the value
      %i label_method and value_method are optional


    = example do |e|
      - e.header do
        = ui_form_for(@user) do |f|
          - f.input :email, append: ui_glyph('envelope'), as: :ui_auto_complete_field, collection: 5.times.map{|i| "test#{i}@test.com"}
      - e.code do
        :plain
          ui_form_for(@user) do |f|
            ...
            f.input :email, append: ui_glyph("envelope"), as: :ui_auto_complete_field, collection: 5.times.map{|i| "test\#{i}@test.com"}
            ...
          end

= @sections.render
