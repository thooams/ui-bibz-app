= title "Dropdown select Field #{ etiquette 'Beta', status: :danger }"
%blockquote UiBibz::Ui::Core::Forms::Selects::DropdownSelectField
%p.bd-callout= based_on link_to "Bootstrap select", "http://silviomoreto.github.io/bootstrap-select/examples/", target: '_blank'

= code "dropdown_select_field", component_name: "name"

= component_options do |co|
  - co.status_link
  - co.state_link
  - co.list 'option_tags', types: %w(array object)
  - co.list 'searchable', types: 'boolean'
  - co.list 'include_blank', types: 'boolean'
  - co.list 'prompt', types: 'string'
  - co.list 'max_options', types: 'integer'
  - co.list 'select_text_format', types: 'string'
  - co.list 'menu_size', types: 'integer'
  - co.list 'header', types: 'string'
  - co.list 'actions_box', types: 'boolean'
  - co.list 'show_tick', types: 'boolean'
  - co.list 'show_menu_arrow', types: 'boolean'
  - co.list 'dropup', types: 'boolean'
  - co.list 'connect', types: 'hash'
  - co.list 'refresh', types: 'hash'
  - co.list 'append', types: %w(string html)
  - co.list 'prepend', types: %w(string html)

- @sections = sections do |s|
  - s.section title: "Dropdown Select Field" do
    = example do |e|
      - e.header do
        = dropdown_select_field 'example1', option_tags: select_options_tags, prompt: 'Select an option', include_blank: true
      - e.code do
        options_tags = options_for_select(5.times.map{ |i| ["option \#{i}", i] })
        dropdown_select_field 'example1', option_tags: option_tags, prompt: 'Select an option', include_blank: true
      - e.html do
        <div class="btn-group bootstrap-select">
          <button type="button" class="btn dropdown-toggle btn-secondary" data-toggle="dropdown" data-id="example1" title="option 0">
            <span class="filter-option pull-left">option 0</span>&nbsp;
            <span class="bs-caret">
              <span class="caret"></span>
            </span>
          </button>
          <div class="dropdown-menu open">
            <ul class="dropdown-menu inner" role="menu">
              <li data-original-index="0" class="selected">
                <a tabindex="0" class="" style="" data-tokens="null">
                  <span class="text">Select an option</span>
                  <span class="fa fa-check check-mark"></span>
                </a>
              </li>
              <li data-original-index="1">
                <a tabindex="0" class="" style="" data-tokens="null">
                  <span class="text"></span>
                  <span class="fa fa-check check-mark"></span>
                </a>
              </li>
              <li data-original-index="2" class="selected">
                <a tabindex="0" class="" style="" data-tokens="null">
                  <span class="text">option 0</span>
                  <span class="fa fa-check check-mark"></span>
                </a>
              </li>
              <li data-original-index="3">
                <a tabindex="0" class="" style="" data-tokens="null">
                  <span class="text">option 1</span>
                  <span class="fa fa-check check-mark"></span>
                </a>
              </li>
              <li data-original-index="4">
                <a tabindex="0" class="" style="" data-tokens="null">
                  <span class="text">option 2</span>
                  <span class="fa fa-check check-mark"></span>
                </a>
              </li>
              <li data-original-index="5">
                <a tabindex="0" class="" style="" data-tokens="null">
                  <span class="text">option 3</span>
                  <span class="fa fa-check check-mark"></span>
                </a>
              </li>
              <li data-original-index="6">
                <a tabindex="0" class="" style="" data-tokens="null">
                  <span class="text">option 4</span>
                  <span class="fa fa-check check-mark"></span>
                </a>
              </li>
              <li data-original-index="7">
                <a tabindex="0" class="" style="" data-tokens="null">
                  <span class="text">option 5</span>
                  <span class="fa fa-check check-mark"></span>
                </a>
              </li>
            </ul>
          </div>
          <select name="example1" id="example1" class="selectpicker" tabindex="-98">
            <option value>Select an option</option>
            <option value label=""> </option>
            <option value="option 0">option 0</option>
            <option value="option 1">option 1</option>
            <option value="option 2">option 2</option>
            <option value="option 3">option 3</option>
            <option value="option 4">option 4</option>
            <option value="option 5">option 5</option>
          </select>
        </div>
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Optgroup options" do
    = example do |e|
      - e.header do
        - grouped_options = { 'North America' => [['United states','US'], 'Canada'], 'Europe' => ['Denmark','Germany','France'] }
        =  dropdown_select_field 'example 1', option_tags: grouped_options_for_select(grouped_options)
      - e.code do
        grouped_options = { 'North America' => [['United states','US'], 'Canada'], 'Europe' => ['Denmark','Germany','France'] }
        dropdown_select_field 'example 1', option_tags: grouped_options_for_select(grouped_options)
      - e.html do
        :plain
          <select name="example 1" id="example_1" class="select-field form-control">
            <optgroup label="North America">
              <option value="US">United states</option>
              <option value="Canada">Canada</option></optgroup>
            <optgroup label="Europe">
              <option value="Denmark">Denmark</option>
              <option value="Germany">Germany</option>
              <option value="France">France</option>
            </optgroup>
          </select>
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Searchable option" do
    = example do |e|
      - e.header do
        = dropdown_select_field 'example1', searchable: true, option_tags: select_options_tags
      - e.code do
        options_tags = options_for_select(5.times.map{ |i| ["option \#{i}", i] })
        dropdown_select_field 'example1', searchable: true, option_tags: option_tags
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Max_options option" do
    = example do |e|
      - e.header do
        = dropdown_select_field 'example1', max_options: 3, option_tags: select_options_tags
      - e.code do
        option_tags = options_for_select(5.times.map{ |i| ["option \#{i}", i] })
        dropdown_select_field 'example1', max_options: 3, option_tags: option_tags
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Selected_text_format option" do
    %p
      %strong values:
      A comma delimited list of selected values (default)
      %br
      %strong count:
      If one item is selected, then the option value is shown. If more than one is selected then the number of selected items is displayed, e.g. 2 of 6 selected
      %br
      %strong count > x:
      Where x is the number of items selected when the display format changes from values to count
      %br
      %strong static:
      Always show the select title (placeholder), regardless of selection

    = example do |e|
      - e.header do
        = dropdown_select_field 'example1', selected_text_format: "count", option_tags: select_options_tags
      - e.code do
        option_tags = options_for_select(5.times.map{ |i| ["option \#{i}", i] })
        dropdown_select_field 'example1', selected_text_format: "count", option_tags: option_tags
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Surround options" do
    = example do |e|
      - e.header do
        = dropdown_select_field 'example1', option_tags: select_options_tags, append: glyph('pencil'), prepend: glyph('diamond')
      - e.code do
        option_tags = options_for_select(5.times.map{ |i| ["option \#{i}", i] })
        dropdown_select_field 'example1', option_tags: select_options_tags, append: glyph('pencil'), prepend: glyph('diamond')
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Field Connected" do
    = render partial: '/components/connect_option'

  - s.section title: "Connected (remote)" do
    = example do |e|
      - e.header do
        - connect = { mode: 'remote', target: { selector: '#example_1_target', url: components_forms_selects_select_field_path }}
        = dropdown_select_field 'example 1', { prompt: 'select', option_tags: select_options_tags, connect: connect }
        %br
        %br
        = dropdown_select_field 'example 1 target', option_tags: select_options_tags
      - e.code do
        options_tags = options_for_select(5.times.map{ |i| ["option \#{i}", i] })
        \# First Dropdown Field
        connect = { mode: 'remote', target: { selector: '#example_1_target', url: components_forms_selects_select_field_path }}
        dropdown_select_field 'example 1', { option_tags: select_options_tags, connect: connect }
        \# Second Dropdown Field
        dropdown_select_field 'example 1 target', option_tags: select_options_tags
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Connected (local)" do
    = example do |e|
      - e.header do
        - options_data = 5.times.map{ |o| 5.times.map{ |i| { text: "New option #{ o }.#{ i }", value: i, connect_option_id: o }}}.flatten
        = dropdown_select_field 'example 2', { option_tags: select_options_tags, connect: { mode: 'local', target: { selector: '#example_2_target', data: options_data }}}
        %br
        %br
        = dropdown_select_field 'example 2 target', option_tags: select_options_tags
      - e.code do
        option_tags  = options_for_select(5.times.map{ |i| ["option \#{i}", i] })
        \# First Select input
        options_data = 5.times.map{ |o| 5.times.map{ |i| { text: "New option \#{ o }.\#{ i }", value: i, connect_option_id: o }}}.flatten
        connect      = { mode: 'local', target: { selector: '#example_2_target', data: options_data }}}
        dropdown_select_field 'example 2', { option_tags: options_html, connect: connect }

        \# Second Select input
        options_html = options_for_select(5.times.map{ |i| "option \#{i}" })
        dropdown_select_field 'example 2 target', option_tags: options_html
      - e.html do
        :plain
          <select name='example 1' id='example_1' data-connect="{'type':'remote','target':{'selector':'#example_1_target','url':'/components/forms/selects/select-field'}}" class="ui-bibz-connect select-field form-control">
            <option value="option 0">option 0</option>
            <option value="option 1">option 1</option>
            <option value="option 2">option 2</option>
            <option value="option 3">option 3</option>
            <option value="option 4">option 4</option></select>
          <select name="example 1 target" id="example_1_target" class="select-field form-control">
            <option value="option 0">option 0</option>
            <option value="option 1">option 1</option>
            <option value="option 2">option 2</option>
            <option value="option 3">option 3</option>
            <option value="option 4">option 4</option>
          </select>
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Refresh Connected" do
    %p Option <code>refresh</code> take same arguments than <code>connect</code> option.
    = example do |e|
      - e.header do
        - refresh = { target: { url: components_forms_selects_select_field_path }}
        = dropdown_select_field 'example 3 target', option_tags: select_options_tags, refresh: refresh
      - e.code do
        option_tags = options_for_select(5.times.map{ |i| ["option \#{i}", i] })
        connect     = { target: { url: components_forms_selects_select_field_path }}
        dropdown_select_field 'example 3', option_tags: option_tags, refresh: connect
      - e.html do
        :plain
          <div class="input-group select-field-refresh">
            <div class="btn-group bootstrap-select input-group-btn">
              <button type="button" class="btn dropdown-toggle btn-secondary" data-toggle="dropdown" data-id="example_3_target" title="New option 2" aria-expanded="false">
                <span class="filter-option pull-left">New option 2</span>&nbsp;<span class="bs-caret">
                  <span class="caret">
                  </span>
                </span>
              </button>
              <div class="dropdown-menu open" style="max-height: 6169px; overflow: hidden; min-height: 0px;">
                <ul class="dropdown-menu inner" role="menu" style="max-height: 6151px; overflow-y: auto; min-height: 0px;">
                  <li data-original-index="0" class="">
                    <a tabindex="0" class="" style="" data-tokens="null">
                      <span class="text">New option 1</span>
                      <span class="fa fa-check check-mark"></span>
                    </a>
                  </li>
                  <li data-original-index="1" class="selected">
                    <a tabindex="0" class="" style="" data-tokens="null">
                      <span class="text">New option 2</span>
                      <span class="fa fa-check check-mark"></span>
                    </a>
                  </li>
                </ul>
              </div>
              <select name="example 3 target" id="example_3_target" class="selectpicker" tabindex="-98">
                <option value="1">New option 1</option>
                <option value="2">New option 2</option>
              </select>
            </div>
            <span class="input-group-btn">
              <button data-connect="{&quot;events&quot;:&quot;click&quot;,&quot;mode&quot;:&quot;remote&quot;,&quot;target&quot;:{&quot;selector&quot;:&quot;#example_3_target&quot;,&quot;url&quot;:&quot;/components/forms/selects/select-field&quot;,&quot;data&quot;:[]}}" class="btn-primary ui-bibz-connect input-refresh-button btn">
              <i class="glyph fa fa-refresh"></i>
              </button>
            </span>
          </div>
      - e.footer do
        = documentation_link 'Documentation', '#'


  - s.section title: "Simple form" do
    :markdown
      You can use the <code>dropdown select field</code> with gem [simple form](https://github.com/plataformatec/simple_form).

      You must add this line in the file `"config/initializers/simple_form.rb"`

    = example do |e|
      - e.code do
        \...
        config.custom_inputs_namespaces << "CustomInputs"
        \...
    %p
      Then in your view, you can insert your input dropdown select field.
      This simple form component is based on simple_form
      = link_to "collection", "https://github.com/plataformatec/simple_form#collections"
      %br
      Collection inputs accept two other options beside collections:
      %ul
        %li label_method => the label method to be applied to the collection to retrieve the label (use this instead of the text_method option in collection_select)
        %li value_method => the value method to be applied to the collection to retrieve the value
      %i label_method and value_method are optional

    = example do |e|
      - e.header do
        = simple_form_for(@user) do |f|
          - f.association :country, as: :dropdown_select_field, collection: @countries, label_method: :name, value_method: :id
      - e.code do
        simple_form_for(@user) do |f|
          ...
          f.association :country, as: :dropdown_select_field, collection: @countries, label_method: :name, value_method: :id
          ...
        end
      - e.footer do
        = documentation_link 'Documentation', '#'

    %p
      You can use `grouped: true` option to group collection
      %br
      Grouped collection inputs accept the same :label_method and :value_method options, which will be used to retrieve label/value attributes for the option tags. Besides that, you can give:
      %ul
        %li group_method => the method to be called on the given collection to generate the options for each group (required)
        %li group_label_method => the label method to be applied on the given collection to retrieve the label for the optgroup (Simple Form will attempt to guess the best one the same way it does with :label_method)


    = example do |e|
      - e.header do
        = simple_form_for(@user) do |f|
          - f.association :country, as: :dropdown_select_field, collection: @continents, grouped: true, group_method: :countries, label_method: :name, value_method: :id
      - e.code do
        simple_form(@search) do |f|
          ...
          f.input :country, as: :dropdown_select_field, grouped: true, collection: @collection,  group_method: :last, label_method: :name, value_method: :value
          ...
        end
      - e.footer do
        = documentation_link 'Documentation', '#'

    %p You can add option <code>refresh</code> in your association.
    = example do |e|
      - e.header do
        = simple_form_for(@user) do |f|
          - refresh = { status: :danger, target: { selector: 'form:last select[name="user[name]"]', url: components_forms_selects_select_field_path }}
          - connect = { target: { selector: '#company', url: components_forms_selects_select_field_path }}
          = f.input :name, prompt: 'select tatatat', include_blank: true, as: :dropdown_select_field, refresh: refresh, connect: connect, collection: @countries, label_method: :name, value_method: :id
          = f.input :company, as: :dropdown_select_field, refresh: { target: { url: components_forms_selects_select_field_path }}, collection: @countries, label_method: :name, value_method: :id
      - e.code do
        simple_form_for(@user) do |f|
          ...
          f.association :country, as: :dropdown_select_field, refresh: { target: { url: components_forms_selects_select_field_path }}, collection: @countries, label_method: :name, value_method: :id
          ...
        end
      - e.footer do
        = documentation_link 'Documentation', '#'

= @sections.render
