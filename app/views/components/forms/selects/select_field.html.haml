= title "Select Field"
%blockquote UiBibz::Ui::Core::Forms::Selects::SelectField

= code "select_field", component_name: "name"

= component_options do |co|
  - co.state_link
  - co.list 'option_tags', types: %w(array object)
  - co.list 'connect', types: "hash"
  - co.list 'refresh', types: "hash"

- @sections = sections do |s|

  - s.section title: "Select Field" do
    = example do |e|
      - e.header do
        = select_field 'example 0', option_tags: options_for_select(5.times.map{ |i| "option #{i}" })
      - e.code do
        select_field 'example 0', option_tags: options_for_select(5.times.map{ |i| "option \#{i}" })
      - e.html do
        <>
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Select Field Remote Connected" do
    = example do |e|
      - e.header do
        = select_field 'example 1', { option_tags: options_for_select(5.times.map{ |i| "option #{i}" }), connect: { type: 'remote', target: { selector: '#example_1_target', url: components_forms_selects_select_field_path }}}
        %br
        = select_field 'example 1 target', option_tags: options_for_select(5.times.map{ |i| "option #{i}" })
      - e.code do
        select_field 'example 1', { option_tags: options_for_select(5.times.map{ |i| "option \#{i}" }), connect: { type: 'remote', target: { selector: '#example_1_target', url: components_forms_selects_select_field_path }}}
        select_field 'example 1 target', option_tags: options_for_select(5.times.map{ |i| "option \#{i}" })
      - e.html do
        <>
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Field Connected" do
    %p
      %pre
        :plain
          {
            event 'change|click|...'
            type: 'local|remote',
            target:
              selector: ".my-target|#my-target|...",
              data: [{ text: 'option', value: 1, connect_option_id: 2}]
              url: 'url_data.html'
              component: 'select|dropdown_select|...'
          }
    = example do |e|
      - e.header do
        - options_html = options_for_select(5.times.map{ |i| ["option #{i}", i] })
        - options_data = 5.times.map{ |o| 5.times.map{ |i| { text: "New option #{ o }.#{ i }", value: i, connect_option_id: o }}}.flatten
        = select_field 'example 2', { option_tags: options_html, connect: { type: 'local', target: { selector: '#example_2_target', data: options_data }}}
        %br
        - options_html = options_for_select(5.times.map{ |i| "option #{i}" })
        = select_field 'example 2 target', option_tags: options_html
      - e.code do
        \# First Select input
        options_html = options_for_select(5.times.map{ |i| ["option \#{i}", i] })
        options_data = 5.times.map{ |o| 5.times.map{ |i| { text: "New option \#{ o }.\#{ i }", value: i, connect_option_id: o }}}.flatten
        select_field 'example 2', { option_tags: options_html, connect: { type: 'local', target: { selector: '#example_2_target', data: options_data }}}

        \# Second Select input
        options_html = options_for_select(5.times.map{ |i| "option \#{i}" })
        select_field 'example 2 target', option_tags: options_html
      - e.html do
        <>
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Select Field Refresh Connected" do
    = example do |e|
      - e.header do
        = select_field 'example 3 target', option_tags: options_for_select(5.times.map{ |i| "option #{i}" }), refresh: { target: { url: components_forms_selects_select_field_path }}
      - e.code do
        select_field 'example 3 target', option_tags: options_for_select(5.times.map{ |i| "option \#{i}" }), refresh: { target: { url: components_forms_selects_select_field_path }}
      - e.html do
        <>
      - e.footer do
        = documentation_link 'Documentation', '#'


  - s.section title: "Simple form" do
    :markdown
      You can use the dropdown select field input with gem [simple form](https://github.com/plataformatec/simple_form).

      You must add this line in the file `"config/initializers/simple_form.rb"`

    = example do |e|
      - e.code do
        \...
        config.custom_inputs_namespaces << "CustomInputs"
        \...
    %p
      Then in your view, you can insert your input dropdown select field.
      This simple form component is based on simple_form
      = link_to "collection", "https://github.com/plataformatec/simple_form#collections"
      %br
      Collection inputs accept two other options beside collections:
      %ul
        %li label_method => the label method to be applied to the collection to retrieve the label (use this instead of the text_method option in collection_select)
        %li value_method => the value method to be applied to the collection to retrieve the value
      %i label_method and value_method are optional

    = example do |e|
      - e.code do
        simple_form(@search) do |f|
          ...
          f.input :price, as: :dropdown_select, collection: @collection, label_method: :name, value_method: :value
          ...
        end

    %p
      You can use `grouped: true` option to group collection
      %br
      Grouped collection inputs accept the same :label_method and :value_method options, which will be used to retrieve label/value attributes for the option tags. Besides that, you can give:
      %ul
        %li group_method => the method to be called on the given collection to generate the options for each group (required)
        %li group_label_method => the label method to be applied on the given collection to retrieve the label for the optgroup (Simple Form will attempt to guess the best one the same way it does with :label_method)


    = example do |e|
      - e.code do
        simple_form(@search) do |f|
          ...
          f.input :country, as: :dropdown_select, grouped: true, collection: @collection,  group_method: :last, label_method: :name, value_method: :value
          ...
        end


= @sections.render
