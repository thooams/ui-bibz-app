= title "Select Field"
%blockquote UiBibz::Ui::Core::Forms::Selects::SelectField

= code "ui_select_field", component_name: "name"

= component_options do |co|
  - co.state_link
  - co.list 'option_tags', types: %w(array object)
  - co.list 'connect', types: "hash"
  - co.list 'refresh', types: "hash"
  - co.list 'append', types: %w(string html)
  - co.list 'prepend', types: %w(string html)

- @sections = sections do |s|

  - s.section title: "Select Field" do
    = example do |e|
      - e.header do
        = ui_select_field 'example 0', option_tags: select_options_tags
      - e.code do
        option_tags = options_for_select(5.times.map{ |i| ["option \#{i}", i] })
        ui_select_field 'example 0', option_tags: option_tags
      - e.html do
        :plain
          <select name="example 0" id="example_0" class="select-field form-control">
            <option value="option 0">option 0</option>
            <option value="option 1">option 1</option>
            <option value="option 2">option 2</option>
            <option value="option 3">option 3</option>
            <option value="option 4">option 4</option>
          </select>
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Optgroup options" do
    = example do |e|
      - e.header do
        - grouped_options = { 'North America' => [['United states','US'], 'Canada'], 'Europe' => ['Denmark','Germany','France'] }
        =  ui_select_field 'example 1', option_tags: grouped_options_for_select(grouped_options)
      - e.code do
        grouped_options = { 'North America' => [['United states','US'], 'Canada'], 'Europe' => ['Denmark','Germany','France'] }
        ui_select_field 'example 1', option_tags: grouped_options_for_select(grouped_options)
      - e.html do
        :plain
          <select name="example 1" id="example_1" class="select-field form-control">
            <optgroup label="North America">
              <option value="US">United states</option>
              <option value="Canada">Canada</option></optgroup>
            <optgroup label="Europe">
              <option value="Denmark">Denmark</option>
              <option value="Germany">Germany</option>
              <option value="France">France</option>
            </optgroup>
          </select>
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Status options" do
    = example do |e|
      - e.header do
        = ui_select_field 'example1', status: :success, option_tags: select_options_tags
      - e.code do
        option_tags = options_for_select(5.times.map{ |i| ["option \#{i}", i] })
        ui_select_field 'example1', status: :success, option_tags: select_options_tags
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Surround options" do
    = example do |e|
      - e.header do
        = ui_select_field 'example1', option_tags: select_options_tags, append: ui_glyph('pencil'), prepend: ui_glyph('diamond')
      - e.code do
        option_tags = options_for_select(5.times.map{ |i| ["option \#{i}", i] })
        ui_select_field 'example1', option_tags: select_options_tags, append: ui_glyph('pencil'), prepend: ui_glyph('diamond')
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Field Connected" do
    = render partial: '/components/connect_option'

  - s.section title: "Connected (remote)" do
    = example do |e|
      - e.header do
        - connect = { mode: 'remote', target: { selector: '#example_1_target', url: components_forms_selects_select_field_path }}
        = ui_select_field 'example 1', { option_tags: select_options_tags, connect: connect }
        %br
        = ui_select_field 'example 1 target', option_tags: select_options_tags
      - e.code do
        option_tags = options_for_select(5.times.map{ |i| ["option \#{i}", i] })
        \# First select input
        connect = { mode: 'remote', target: { selector: '#example_1_target', url: components_forms_selects_select_field_path }}
        ui_select_field 'example 1', { option_tags: options_tags, connect: connect }
        \# Second select input
        ui_select_field 'example 1 target', option_tags: option_tags
      - e.html do
        :plain
          <select name="example 0" id="example_0" class="select-field form-control">
            <option value="option 0">option 0</option>
            <option value="option 1">option 1</option>
            <option value="option 2">option 2</option>
            <option value="option 3">option 3</option>
            <option value="option 4">option 4</option>
          </select>
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Connected (local)" do
    = example do |e|
      - e.header do
        - options_data = 5.times.map{ |o| 5.times.map{ |i| { text: "New option #{ o }.#{ i }", value: i, connect_option_id: o }}}.flatten
        = ui_select_field 'example 2', { option_tags: select_options_tags, connect: { mode: 'local', target: { selector: '#example_2_target', data: options_data }}}
        %br
        = ui_select_field 'example 2 target', option_tags: select_options_tags
      - e.code do
        option_tags  = options_for_select(5.times.map{ |i| ["option \#{i}", i] })
        \# First Select input
        options_data = 5.times.map{ |o| 5.times.map{ |i| { text: "New option \#{ o }.\#{ i }", value: i, connect_option_id: o }}}.flatten
        connect      = { mode: 'local', target: { selector: '#example_2_target', data: options_data }}}
        ui_select_field 'example 2', { option_tags: options_html, connect: connect }

        \# Second Select input
        options_html = options_for_select(5.times.map{ |i| "option \#{i}" })
        ui_select_field 'example 2 target', option_tags: options_html
      - e.html do
        :plain
          <select name='example 1' id='example_1' data-connect="{'type':'remote','target':{'selector':'#example_1_target','url':'/components/forms/selects/select-field'}}" class="ui-bibz-connect select-field form-control">
            <option value="option 0">option 0</option>
            <option value="option 1">option 1</option>
            <option value="option 2">option 2</option>
            <option value="option 3">option 3</option>
            <option value="option 4">option 4</option></select>
          <select name="example 1 target" id="example_1_target" class="select-field form-control">
            <option value="option 0">option 0</option>
            <option value="option 1">option 1</option>
            <option value="option 2">option 2</option>
            <option value="option 3">option 3</option>
            <option value="option 4">option 4</option>
          </select>
      - e.footer do
        = documentation_link 'Documentation', '#'

  - s.section title: "Refresh Connected" do
    %p Option <code>refresh</code> take same arguments than <code>connect</code> option.
    = example do |e|
      - e.header do
        - refresh = { target: { url: components_forms_selects_select_field_path }}
        = ui_select_field 'example 3 target', option_tags: select_options_tags, refresh: refresh
      - e.code do
        option_tags = options_for_select(5.times.map{ |i| ["option \#{i}", i] })
        connect     = { target: { url: components_forms_selects_select_field_path }}
        ui_select_field 'example 3', option_tags: option_tags, refresh: connect
      - e.html do
        :plain
          <div class="input-group select-field-refresh">
            <select name="example 3" id="example_3" class="select-field form-control">
              <option value="option 0">option 0</option>
              <option value="option 1">option 1</option>
              <option value="option 2">option 2</option>
              <option value="option 3">option 3</option>
              <option value="option 4">option 4</option>
            </select>
            <span class="input-group-btn">
              <button class='input-refresh-button btn-primary ui-bibz-connect btn' data-connect="{'events':'click','type':'remote','target':{'selector':'#example_3','url':'/components/forms/selects/select-field','data':[]}}">
                <i class="glyph fa fa-refresh"></i>
              </button>
            </span>
          </div>
      - e.footer do
        = documentation_link 'Documentation', '#'



  - s.section title: "Simple form" do
    %p= simple_form_text_with_input "ui_select_field"
    %p
      Then in your view, you can insert your input dropdown select field.
      This simple form component is based on simple_form
      = link_to "collection", "https://github.com/plataformatec/simple_form#collections"
      %br
      Collection inputs accept two other options beside collections:
      %ul
        %li label_method => the label method to be applied to the collection to retrieve the label (use this instead of the text_method option in collection_select)
        %li value_method => the value method to be applied to the collection to retrieve the value
      %i label_method and value_method are optional

    = example do |e|
      - e.header do
        = ui_form_for(@user) do |f|
          - f.association :country, as: :ui_select_field, collection: @countries, label_method: :name, value_method: :id
      - e.code do
        ui_form_for(@user) do |f|
          ...
          f.association :country, as: :ui_select_field, collection: @countries, label_method: :name, value_method: :id
          ...
        end
      - e.footer do
        = documentation_link 'Documentation', '#'

    %p
      You can use `grouped: true` option to group collection
      %br
      Grouped collection inputs accept the same :label_method and :value_method options, which will be used to retrieve label/value attributes for the option tags. Besides that, you can give:
      %ul
        %li group_method => the method to be called on the given collection to generate the options for each group (required)
        %li group_label_method => the label method to be applied on the given collection to retrieve the label for the optgroup (Simple Form will attempt to guess the best one the same way it does with :label_method)


    = example do |e|
      - e.header do
        = ui_form_for(@user) do |f|
          - f.association :country, as: :ui_select_field, collection: @continents, grouped: true, group_method: :countries, label_method: :name, value_method: :id
      - e.code do
        ui_form_for(@search) do |f|
          ...
          f.input :country, as: :ui_select_field, grouped: true, collection: @continents,  group_method: :countries, label_method: :name, value_method: :id
          ...
        end
      - e.footer do
        = documentation_link 'Documentation', '#'

    %p You can add option <code>refresh</code> in your association.
    = example do |e|
      - e.header do
        = ui_form_for(@user) do |f|
          - f.input :email
          - f.association :country, as: :ui_select_field, refresh: { target: { selector: 'form:last select[name=country_id]', url: components_forms_selects_select_field_path }}, collection: @countries, label_method: :name, value_method: :id
      - e.code do
        ui_form_for(@user) do |f|
          ...
          f.association :country, as: :ui_select_field, refresh: { target: { url: components_forms_selects_select_field_path }}, collection: @countries, label_method: :name, value_method: :id
          ...
        end
      - e.footer do
        = documentation_link 'Documentation', '#'

= @sections.render
